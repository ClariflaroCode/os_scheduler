// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"
)

const createProcess = `-- name: CreateProcess :one




INSERT INTO procesos (nombre, prioridad, burst_time, arrival_time, estado, id_simulacion)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, nombre, prioridad, burst_time, arrival_time, estado, id_simulacion
`

type CreateProcessParams struct {
	Nombre       string `json:"nombre"`
	Prioridad    int32  `json:"prioridad"`
	BurstTime    int32  `json:"burst_time"`
	ArrivalTime  int32  `json:"arrival_time"`
	Estado       string `json:"estado"`
	IDSimulacion int32  `json:"id_simulacion"`
}

// • Una consulta para crear un nuevo registro (Create...).
// • Una consulta para obtener un registro por su ID (Get...).
// • Una consulta para listar todos los registros (List...).
// -• Una consulta para actualizar un registro (Update...).
// • Una consulta para borrar un registro (Delete...).
// Utiliza las anotaciones que requiere sqlc (-- name: ...).
func (q *Queries) CreateProcess(ctx context.Context, arg CreateProcessParams) (Proceso, error) {
	row := q.db.QueryRowContext(ctx, createProcess,
		arg.Nombre,
		arg.Prioridad,
		arg.BurstTime,
		arg.ArrivalTime,
		arg.Estado,
		arg.IDSimulacion,
	)
	var i Proceso
	err := row.Scan(
		&i.ID,
		&i.Nombre,
		&i.Prioridad,
		&i.BurstTime,
		&i.ArrivalTime,
		&i.Estado,
		&i.IDSimulacion,
	)
	return i, err
}

const deleteProcess = `-- name: DeleteProcess :exec
DELETE FROM procesos
WHERE id= $1
`

func (q *Queries) DeleteProcess(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProcess, id)
	return err
}

const getProcess = `-- name: GetProcess :one
SELECT id, nombre, prioridad, burst_time, arrival_time, estado, id_simulacion
FROM procesos
WHERE id = $1
`

func (q *Queries) GetProcess(ctx context.Context, id int32) (Proceso, error) {
	row := q.db.QueryRowContext(ctx, getProcess, id)
	var i Proceso
	err := row.Scan(
		&i.ID,
		&i.Nombre,
		&i.Prioridad,
		&i.BurstTime,
		&i.ArrivalTime,
		&i.Estado,
		&i.IDSimulacion,
	)
	return i, err
}

const listProcess = `-- name: ListProcess :many
SELECT id, nombre, prioridad, burst_time, arrival_time, estado, id_simulacion
FROM procesos
ORDER BY id
`

func (q *Queries) ListProcess(ctx context.Context) ([]Proceso, error) {
	rows, err := q.db.QueryContext(ctx, listProcess)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Proceso
	for rows.Next() {
		var i Proceso
		if err := rows.Scan(
			&i.ID,
			&i.Nombre,
			&i.Prioridad,
			&i.BurstTime,
			&i.ArrivalTime,
			&i.Estado,
			&i.IDSimulacion,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProcess = `-- name: UpdateProcess :exec
UPDATE procesos
SET nombre=$2,
    prioridad=$3,
    burst_time=$4,
    arrival_time=$5, 
    estado=$6
WHERE id = $1
`

type UpdateProcessParams struct {
	ID          int32  `json:"id"`
	Nombre      string `json:"nombre"`
	Prioridad   int32  `json:"prioridad"`
	BurstTime   int32  `json:"burst_time"`
	ArrivalTime int32  `json:"arrival_time"`
	Estado      string `json:"estado"`
}

func (q *Queries) UpdateProcess(ctx context.Context, arg UpdateProcessParams) error {
	_, err := q.db.ExecContext(ctx, updateProcess,
		arg.ID,
		arg.Nombre,
		arg.Prioridad,
		arg.BurstTime,
		arg.ArrivalTime,
		arg.Estado,
	)
	return err
}
